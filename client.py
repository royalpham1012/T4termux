#!/usr/bin/env python3
"""
Client04.py - 2507302045 - Qu·∫£n l√Ω MT5 v√† Firebase t·ª´ xa
Ch·∫°y tr√™n Android (Termux) ƒë·ªÉ qu·∫£n l√Ω th√¥ng tin t√†i kho·∫£n v√† Firebase
"""

import requests
import json
import os
import sys

import time
import threading
from datetime import datetime

# C·∫•u h√¨nh
SERVER_URL = "https://415ac1d425dc.ngrok-free.app"  # Local server URL
TIMEOUT = 10

class ConfigManager:
    def __init__(self, server_url):
        self.server_url = server_url
        self.session = requests.Session()
        self.session.timeout = TIMEOUT

    def test_connection(self):
        """Test k·∫øt n·ªëi ƒë·∫øn server"""
        try:
            response = self.session.get(f"{self.server_url}/api/health")
            if response.status_code == 200:
                data = response.json()
                return data.get('status') == 'healthy'
            return False
        except Exception as e:
            print(f"‚ùå L·ªói k·∫øt n·ªëi: {e}")
            return False

    def get_mt5_account_info(self):
        """L·∫•y th√¥ng tin t√†i kho·∫£n MT5"""
        try:
            response = self.session.get(f"{self.server_url}/api/mt5-account-info")
            if response.status_code == 200:
                return response.json()
            else:
                print(f"‚ùå L·ªói HTTP: {response.status_code}")
                return None
        except Exception as e:
            print(f"‚ùå L·ªói: {e}")
            return None

    # YouTube Channel Management Methods
    def get_youtube_channels(self):
        """L·∫•y danh s√°ch YouTube channels"""
        try:
            response = self.session.get(f"{self.server_url}/api/youtube/channels")
            if response.status_code == 200:
                return response.json()
            else:
                print(f"‚ùå L·ªói HTTP: {response.status_code}")
                return None
        except Exception as e:
            print(f"‚ùå L·ªói: {e}")
            return None

    def add_youtube_channel(self, channel_data):
        """Th√™m YouTube channel m·ªõi"""
        try:
            response = self.session.post(f"{self.server_url}/api/youtube/channels", json=channel_data)
            if response.status_code == 200:
                return response.json()
            else:
                error_data = response.json()
                return error_data
        except Exception as e:
            return {"error": f"L·ªói k·∫øt n·ªëi: {e}"}

    def delete_youtube_channel(self, channel_id):
        """X√≥a YouTube channel"""
        try:
            response = self.session.delete(f"{self.server_url}/api/youtube/channels/{channel_id}")
            if response.status_code == 200:
                return response.json()
            else:
                error_data = response.json()
                return error_data
        except Exception as e:
            return {"error": f"L·ªói k·∫øt n·ªëi: {e}"}

    def update_channel_id(self, channel_id):
        """C·∫≠p nh·∫≠t channel ID t·ª´ handle"""
        try:
            response = self.session.post(f"{self.server_url}/api/youtube/channels/{channel_id}/update-id")
            if response.status_code == 200:
                return response.json()
            else:
                error_data = response.json()
                return error_data
        except Exception as e:
            return {"error": f"L·ªói k·∫øt n·ªëi: {e}"}

    # Firebase Management Methods
    def get_firebase_collections(self):
        """L·∫•y danh s√°ch t·∫•t c·∫£ collections trong Firebase"""
        try:
            response = self.session.get(f"{self.server_url}/api/firebase/collections")
            if response.status_code == 200:
                return response.json()
            else:
                print(f"‚ùå L·ªói HTTP: {response.status_code}")
                return None
        except Exception as e:
            print(f"‚ùå L·ªói: {e}")
            return None

    def get_collection_stats(self, collection_name):
        """L·∫•y th·ªëng k√™ c·ªßa m·ªôt collection"""
        try:
            response = self.session.get(f"{self.server_url}/api/firebase/collection/{collection_name}/stats")
            if response.status_code == 200:
                return response.json()
            else:
                print(f"‚ùå L·ªói HTTP: {response.status_code}")
                return None
        except Exception as e:
            print(f"‚ùå L·ªói: {e}")
            return None

    def clear_collection(self, collection_name):
        """X√≥a to√†n b·ªô documents trong m·ªôt collection"""
        try:
            response = self.session.delete(f"{self.server_url}/api/firebase/collection/{collection_name}/clear")
            if response.status_code == 200:
                return response.json()
            else:
                print(f"‚ùå L·ªói HTTP: {response.status_code}")
                return None
        except Exception as e:
            print(f"‚ùå L·ªói: {e}")
            return None

    def clear_old_documents(self, collection_name, days):
        """X√≥a documents c≈© trong m·ªôt collection d·ª±a tr√™n s·ªë ng√†y"""
        try:
            response = self.session.delete(
                f"{self.server_url}/api/firebase/collection/{collection_name}/clear-old?days={days}")
            if response.status_code == 200:
                return response.json()
            else:
                print(f"‚ùå L·ªói HTTP: {response.status_code}")
                return None
        except Exception as e:
            print(f"‚ùå L·ªói: {e}")
            return None

    def get_collection_documents(self, collection_name, limit=50, offset=0):
        """L·∫•y danh s√°ch documents trong m·ªôt collection"""
        try:
            response = self.session.get(
                f"{self.server_url}/api/firebase/collection/{collection_name}/documents?limit={limit}&offset={offset}")
            if response.status_code == 200:
                return response.json()
            else:
                print(f"‚ùå L·ªói HTTP: {response.status_code}")
                return None
        except Exception as e:
            print(f"‚ùå L·ªói: {e}")
            return None

    def delete_document(self, collection_name, document_id):
        """X√≥a m·ªôt document c·ª• th·ªÉ"""
        try:
            response = self.session.delete(f"{self.server_url}/api/firebase/document/{collection_name}/{document_id}")
            if response.status_code == 200:
                return response.json()
            else:
                print(f"‚ùå L·ªói HTTP: {response.status_code}")
                return None
        except Exception as e:
            print(f"‚ùå L·ªói: {e}")
            return None

    def update_document(self, collection_name, document_id, data):
        """C·∫≠p nh·∫≠t m·ªôt document c·ª• th·ªÉ"""
        try:
            response = self.session.put(f"{self.server_url}/api/firebase/document/{collection_name}/{document_id}",
                                        json=data)
            if response.status_code == 200:
                return response.json()
            else:
                print(f"‚ùå L·ªói HTTP: {response.status_code}")
                return None
        except Exception as e:
            print(f"‚ùå L·ªói: {e}")
            return None


def clear_screen():
    """X√≥a m√†n h√¨nh"""
    os.system('clear' if os.name == 'posix' else 'cls')


def show_header():
    """Hi·ªÉn th·ªã header"""
    print("=" * 60)
    print("ü§ñ QU·∫¢N L√ù MT5 V√Ä FIREBASE")
    print("=" * 60)
    print(f"üì° Server: {SERVER_URL}")
    print(f"‚è∞ Th·ªùi gian: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("-" * 60)


def show_mt5_account_info(config_manager):
    """Hi·ªÉn th·ªã th√¥ng tin t√†i kho·∫£n MT5 v·ªõi c·∫≠p nh·∫≠t realtime"""
    # Bi·∫øn ƒë·ªÉ ki·ªÉm so√°t v√≤ng l·∫∑p
    stop_updating = False
    update_count = 0

    def check_for_enter():
        """Thread ƒë·ªÉ ki·ªÉm tra ph√≠m Enter"""
        nonlocal stop_updating
        input("Nh·∫•n Enter ƒë·ªÉ d·ª´ng c·∫≠p nh·∫≠t...")
        stop_updating = True

    # B·∫Øt ƒë·∫ßu thread ki·ªÉm tra ph√≠m Enter
    enter_thread = threading.Thread(target=check_for_enter, daemon=True)
    enter_thread.start()

    print("üîÑ B·∫Øt ƒë·∫ßu c·∫≠p nh·∫≠t realtime m·ªói 30 gi√¢y...")
    time.sleep(0.5)

    while not stop_updating:
        try:
            update_count += 1

            # X√≥a m√†n h√¨nh v√† hi·ªÉn th·ªã header
            clear_screen()
            print("=" * 60)
            print("ü§ñ QU·∫¢N L√ù MT5 V√Ä FIREBASE")
            print("=" * 60)
            print(f"üì° Server: {SERVER_URL}")
            print(f"‚è∞ Th·ªùi gian: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
            print("-" * 60)
            print("üí∞ TH√îNG TIN T√ÄI KHO·∫¢N MT5 (REALTIME)")
            print("=" * 60)

            # Hi·ªÉn th·ªã tr·∫°ng th√°i c·∫≠p nh·∫≠t
            loading_chars = ["‚†ã", "‚†ô", "‚†π", "‚†∏", "‚†º", "‚†¥", "‚†¶", "‚†ß", "‚†á", "‚†è"]
            loading_char = loading_chars[update_count % len(loading_chars)]
            print(f"{loading_char} ƒêang c·∫≠p nh·∫≠t... (L·∫ßn th·ª© {update_count})")

            # L·∫•y th√¥ng tin t√†i kho·∫£n MT5
            account_info = config_manager.get_mt5_account_info()
            if not account_info:
                print("‚ùå Kh√¥ng th·ªÉ l·∫•y th√¥ng tin t√†i kho·∫£n MT5")
                print("C√≥ th·ªÉ do:")
                print("  - Bot ch∆∞a kh·ªüi ƒë·ªông")
                print("  - MT5 ch∆∞a k·∫øt n·ªëi")
                print("  - Server kh√¥ng h·ªó tr·ª£ API n√†y")
                print("\nüîÑ ƒêang th·ª≠ l·∫°i...")
                time.sleep(3)
                continue

            # Hi·ªÉn th·ªã th√¥ng tin t√†i kho·∫£n
            if 'account' in account_info:
                account = account_info['account']
                print("\nüìä TH√îNG TIN T√ÄI KHO·∫¢N:")
                print(f"  üÜî Login: {account.get('login', 'N/A')}")
                print(f"  üè¶ Server: {account.get('server', 'N/A')}")
                print(f"  üí∞ Balance: ${account.get('balance', 0):,.2f}")
                print(f"  üíµ Equity: ${account.get('equity', 0):,.2f}")
                print(f"  üìà Profit: ${account.get('profit', 0):,.2f}")
                print(f"  üí≥ Margin: ${account.get('margin', 0):,.2f}")
                print(f"  üîí Free Margin: ${account.get('free_margin', 0):,.2f}")
                print(f"  üìä Margin Level: {account.get('margin_level', 0):,.2f}%")
                print(f"  üéØ Currency: {account.get('currency', 'N/A')}")

            # Hi·ªÉn th·ªã c√°c l·ªánh ƒëang m·ªü
            if 'positions' in account_info:
                positions = account_info['positions']
                print(f"\nüìã L·ªÜNH ƒêANG M·ªû ({len(positions)} l·ªánh):")
                if positions:
                    print(
                        f"{'Ticket':<10} {'Symbol':<10} {'Type':<6} {'Volume':<8} {'Price':<10} {'Profit':<12} {'Comment':<15}")
                    print("-" * 80)
                    for pos in positions:
                        ticket = pos.get('ticket', 'N/A')
                        symbol = pos.get('symbol', 'N/A')
                        pos_type = 'BUY' if pos.get('type', 0) == 0 else 'SELL'
                        volume = pos.get('volume', 0)
                        price = pos.get('price_open', 0)
                        profit = pos.get('profit', 0)
                        comment = pos.get('comment', 'N/A')

                        # Th√™m m√†u s·∫Øc cho profit
                        profit_str = f"${profit:<11.2f}"
                        if profit > 0:
                            profit_str = f"üìà {profit_str}"
                        elif profit < 0:
                            profit_str = f"üìâ {profit_str}"

                        print(
                            f"{ticket:<10} {symbol:<10} {pos_type:<6} {volume:<8.2f} {price:<10.5f} {profit_str} {comment:<15}")
                else:
                    print("  Kh√¥ng c√≥ l·ªánh n√†o ƒëang m·ªü")

            # Hi·ªÉn th·ªã th·ªëng k√™ t·ªïng quan
            if 'summary' in account_info:
                summary = account_info['summary']
                print(f"\nüìà TH·ªêNG K√ä T·ªîNG QUAN:")
                print(f"  üìä T·ªïng l·ªánh m·ªü: {summary.get('total_positions', 0)}")
                print(f"  üí∞ T·ªïng profit: ${summary.get('total_profit', 0):,.2f}")
                print(f"  üìà L·ªánh c√≥ l√£i: {summary.get('profitable_positions', 0)}")
                print(f"  üìâ L·ªánh thua l·ªó: {summary.get('losing_positions', 0)}")

            # Hi·ªÉn th·ªã th·ªëng k√™ trong ng√†y
            if 'today_summary' in account_info:
                today_summary = account_info['today_summary']
                period = today_summary.get('period', 'H√¥m nay')
                print(f"\nüìÖ TH·ªêNG K√ä TRONG NG√ÄY ({period}):")
                print(f"  üìä L·ªánh m·ªü: {today_summary.get('total_positions', 0)}")
                print(f"  üí∞ Profit: ${today_summary.get('total_profit', 0):,.2f}")
                print(f"  üìà L·ªánh c√≥ l√£i: {today_summary.get('profitable_positions', 0)}")
                print(f"  üìâ L·ªánh thua l·ªó: {today_summary.get('losing_positions', 0)}")

            # Hi·ªÉn th·ªã th·ªùi gian c·∫≠p nh·∫≠t
            if 'timestamp' in account_info:
                timestamp = account_info['timestamp']
                print(f"\n‚è∞ C·∫≠p nh·∫≠t l√∫c: {timestamp}")

            print("\n" + "=" * 60)
            print(f"üîÑ C·∫≠p nh·∫≠t l·∫ßn th·ª© {update_count} - M·ªói 30 gi√¢y - Nh·∫•n Enter ƒë·ªÉ d·ª´ng")

            # Ch·ªù 30 gi√¢y tr∆∞·ªõc khi c·∫≠p nh·∫≠t l·∫°i
            time.sleep(30)

        except KeyboardInterrupt:
            break
        except Exception as e:
            print(f"‚ùå L·ªói khi c·∫≠p nh·∫≠t: {e}")
            print("üîÑ ƒêang th·ª≠ l·∫°i...")
            time.sleep(3)

    print("\n‚úÖ ƒê√£ d·ª´ng c·∫≠p nh·∫≠t realtime")
    input("Nh·∫•n Enter ƒë·ªÉ quay l·∫°i menu ch√≠nh...")


def show_youtube_channel_management(config_manager):
    """Hi·ªÉn th·ªã menu qu·∫£n l√Ω YouTube channels"""
    while True:
        clear_screen()
        show_header()

        print("üì∫ QU·∫¢N L√ù YOUTUBE CHANNELS")
        print("=" * 60)
        print("Ch·ª©c nƒÉng qu·∫£n l√Ω ngu·ªìn video crawler:")
        print("  - Xem danh s√°ch channels")
        print("  - Th√™m channel m·ªõi")
        print("  - X√≥a channel")
        print("  - C·∫≠p nh·∫≠t channel ID")
        print("-" * 60)

        print("üîß MENU YOUTUBE CHANNELS:")
        print("  1. üìã Xem danh s√°ch Channels")
        print("  2. ‚ûï Th√™m Channel m·ªõi")
        print("  3. üóëÔ∏è X√≥a Channel")
        print("  4. üîÑ C·∫≠p nh·∫≠t Channel ID")
        print("  0. üîô Quay l·∫°i menu ch√≠nh")
        print("-" * 60)

        choice = input("Ch·ªçn ch·ª©c nƒÉng (0-4): ").strip()

        if choice == '0':
            break
        elif choice == '1':
            show_youtube_channels_list(config_manager)
        elif choice == '2':
            show_add_youtube_channel(config_manager)
        elif choice == '3':
            show_delete_youtube_channel(config_manager)
        elif choice == '4':
            show_update_channel_id(config_manager)
        else:
            print("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!")
            input("Nh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")


def show_youtube_channels_list(config_manager):
    """Hi·ªÉn th·ªã danh s√°ch YouTube channels"""
    clear_screen()
    show_header()

    print("üìã DANH S√ÅCH YOUTUBE CHANNELS")
    print("=" * 60)

    try:
        result = config_manager.get_youtube_channels()
        if result and result.get('success'):
            channels = result.get('channels', [])
            count = result.get('count', 0)

            print(f"‚úÖ T√¨m th·∫•y {count} channels:")
            print("-" * 80)

            if channels:
                print(f"{'ID':<30} {'T√™n Channel':<25} {'Handle':<15} {'Status':<10}")
                print("-" * 80)
                
                for channel in channels:
                    channel_id = channel.get('id', 'N/A')[:28] + '..' if len(channel.get('id', '')) > 30 else channel.get('id', 'N/A')
                    name = channel.get('name', 'N/A')[:23] + '..' if len(channel.get('name', '')) > 25 else channel.get('name', 'N/A')
                    handle = channel.get('handle', 'N/A')[:13] + '..' if len(channel.get('handle', '')) > 15 else channel.get('handle', 'N/A')
                    status = channel.get('status', 'N/A')
                    
                    print(f"{channel_id:<30} {name:<25} {handle:<15} {status:<10}")
                
                print("-" * 80)
                print(f"üìä T·ªïng c·ªông: {count} channels")
            else:
                print("  Kh√¥ng c√≥ channels n√†o")

        else:
            print("‚ùå Kh√¥ng th·ªÉ l·∫•y danh s√°ch channels")
            if result:
                print(f"L·ªói: {result.get('error', 'Kh√¥ng x√°c ƒë·ªãnh')}")

    except Exception as e:
        print(f"‚ùå L·ªói: {e}")

    print("\n" + "=" * 60)
    input("Nh·∫•n Enter ƒë·ªÉ quay l·∫°i...")


def show_add_youtube_channel(config_manager):
    """Hi·ªÉn th·ªã ch·ª©c nƒÉng th√™m YouTube channel"""
    clear_screen()
    show_header()

    print("‚ûï TH√äM YOUTUBE CHANNEL M·ªöI")
    print("=" * 60)
    print("Ch·ª©c nƒÉng n√†y s·∫Ω th√™m channel m·ªõi v√†o video crawler")
    print("-" * 60)

    try:
        # Nh·∫≠p th√¥ng tin channel
        print("üìù Nh·∫≠p th√¥ng tin channel:")
        channel_url = input("URL Channel (v√≠ d·ª•: https://www.youtube.com/@channelname): ").strip()
        
        if not channel_url:
            print("‚ùå URL kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng")
            input("Nh·∫•n Enter ƒë·ªÉ quay l·∫°i...")
            return

        channel_name = input("T√™n Channel (Enter ƒë·ªÉ t·ª± ƒë·ªông l·∫•y t·ª´ URL): ").strip()
        
        # H·ªèi v·ªÅ lo·∫°i channel
        print("\nüîß C·∫•u h√¨nh channel:")
        is_streams = input("C√≥ ph·∫£i channel streams kh√¥ng? (y/n): ").strip().lower() == 'y'
        notifications_only = input("Ch·ªâ d√πng cho notifications? (y/n): ").strip().lower() == 'y'

        # T·∫°o d·ªØ li·ªáu channel
        channel_data = {
            'url': channel_url,
            'name': channel_name,
            'is_streams': is_streams,
            'notifications_only': notifications_only
        }

        print(f"\nüìã Th√¥ng tin channel s·∫Ω th√™m:")
        print(f"  URL: {channel_url}")
        print(f"  T√™n: {channel_name}")
        print(f"  Streams: {'C√≥' if is_streams else 'Kh√¥ng'}")
        print(f"  Notifications only: {'C√≥' if notifications_only else 'Kh√¥ng'}")

        confirm = input("\nB·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën th√™m channel n√†y? (y/n): ").strip().lower()

        if confirm == 'y':
            print("\n‚ûï ƒêang th√™m channel...")

            result = config_manager.add_youtube_channel(channel_data)
            if result and result.get('success'):
                print("‚úÖ Th√™m channel th√†nh c√¥ng!")
                print(f"üìù K·∫øt qu·∫£: {result.get('message', '')}")
                
                # H·ªèi c√≥ mu·ªën c·∫≠p nh·∫≠t channel ID ngay kh√¥ng
                channel_id = result.get('channel', {}).get('id')
                if channel_id:
                    update_now = input("\nB·∫°n c√≥ mu·ªën c·∫≠p nh·∫≠t channel ID ngay kh√¥ng? (y/n): ").strip().lower()
                    if update_now == 'y':
                        print("üîÑ ƒêang c·∫≠p nh·∫≠t channel ID...")
                        update_result = config_manager.update_channel_id(channel_id)
                        if update_result and update_result.get('success'):
                            print("‚úÖ C·∫≠p nh·∫≠t channel ID th√†nh c√¥ng!")
                        else:
                            print("‚ùå L·ªói khi c·∫≠p nh·∫≠t channel ID")
                            if update_result:
                                print(f"L·ªói: {update_result.get('error', 'Kh√¥ng x√°c ƒë·ªãnh')}")
            else:
                print("‚ùå L·ªói khi th√™m channel")
                if result:
                    print(f"L·ªói: {result.get('error', 'Kh√¥ng x√°c ƒë·ªãnh')}")
        else:
            print("‚ùå ƒê√£ h·ªßy th√™m channel")

    except Exception as e:
        print(f"‚ùå L·ªói: {e}")

    print("\n" + "=" * 60)
    input("Nh·∫•n Enter ƒë·ªÉ quay l·∫°i...")


def show_delete_youtube_channel(config_manager):
    """Hi·ªÉn th·ªã ch·ª©c nƒÉng x√≥a YouTube channel"""
    clear_screen()
    show_header()

    print("üóëÔ∏è X√ìA YOUTUBE CHANNEL")
    print("=" * 60)
    print("Ch·ª©c nƒÉng n√†y s·∫Ω x√≥a channel kh·ªèi video crawler")
    print("-" * 60)

    # L·∫•y danh s√°ch channels
    result = config_manager.get_youtube_channels()
    if not result or not result.get('success'):
        print("‚ùå Kh√¥ng th·ªÉ l·∫•y danh s√°ch channels")
        input("Nh·∫•n Enter ƒë·ªÉ quay l·∫°i...")
        return

    channels = result.get('channels', [])
    if not channels:
        print("‚ùå Kh√¥ng c√≥ channels n√†o")
        input("Nh·∫•n Enter ƒë·ªÉ quay l·∫°i...")
        return

    print("üìã Ch·ªçn channel ƒë·ªÉ x√≥a:")
    for i, channel in enumerate(channels, 1):
        name = channel.get('name', 'N/A')
        url = channel.get('url', 'N/A')
        print(f"  {i:2d}. {name}")
        print(f"      URL: {url}")

    print("-" * 60)

    try:
        choice = input("Nh·∫≠p s·ªë th·ª© t·ª± channel c·∫ßn x√≥a: ").strip()

        if not choice.isdigit():
            print("‚ùå Vui l√≤ng nh·∫≠p s·ªë th·ª© t·ª± h·ª£p l·ªá")
            input("Nh·∫•n Enter ƒë·ªÉ quay l·∫°i...")
            return

        choice_num = int(choice)
        if choice_num < 1 or choice_num > len(channels):
            print("‚ùå S·ªë th·ª© t·ª± kh√¥ng h·ª£p l·ªá")
            input("Nh·∫•n Enter ƒë·ªÉ quay l·∫°i...")
            return

        selected_channel = channels[choice_num - 1]
        channel_id = selected_channel.get('id')
        channel_name = selected_channel.get('name', 'Unknown')

        # X√°c nh·∫≠n x√≥a
        print(f"\n‚ö†Ô∏è B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a channel '{channel_name}'?")
        confirm = input("Nh·∫≠p 'DELETE' ƒë·ªÉ x√°c nh·∫≠n: ").strip()

        if confirm == "DELETE":
            print(f"\nüóëÔ∏è ƒêang x√≥a channel '{channel_name}'...")

            result = config_manager.delete_youtube_channel(channel_id)
            if result and result.get('success'):
                print(f"‚úÖ ƒê√£ x√≥a channel '{channel_name}' th√†nh c√¥ng")
            else:
                print("‚ùå L·ªói khi x√≥a channel")
                if result:
                    print(f"L·ªói: {result.get('error', 'Kh√¥ng x√°c ƒë·ªãnh')}")
        else:
            print("‚ùå ƒê√£ h·ªßy thao t√°c x√≥a")

    except Exception as e:
        print(f"‚ùå L·ªói: {e}")

    print("\n" + "=" * 60)
    input("Nh·∫•n Enter ƒë·ªÉ quay l·∫°i...")


def show_update_channel_id(config_manager):
    """Hi·ªÉn th·ªã ch·ª©c nƒÉng c·∫≠p nh·∫≠t channel ID"""
    clear_screen()
    show_header()

    print("üîÑ C·∫¨P NH·∫¨T CHANNEL ID")
    print("=" * 60)
    print("Ch·ª©c nƒÉng n√†y s·∫Ω c·∫≠p nh·∫≠t channel ID t·ª´ handle")
    print("-" * 60)

    # L·∫•y danh s√°ch channels
    result = config_manager.get_youtube_channels()
    if not result or not result.get('success'):
        print("‚ùå Kh√¥ng th·ªÉ l·∫•y danh s√°ch channels")
        input("Nh·∫•n Enter ƒë·ªÉ quay l·∫°i...")
        return

    channels = result.get('channels', [])
    if not channels:
        print("‚ùå Kh√¥ng c√≥ channels n√†o")
        input("Nh·∫•n Enter ƒë·ªÉ quay l·∫°i...")
        return

    print("üìã Ch·ªçn channel ƒë·ªÉ c·∫≠p nh·∫≠t ID:")
    for i, channel in enumerate(channels, 1):
        name = channel.get('name', 'N/A')
        handle = channel.get('handle', 'N/A')
        channel_id = channel.get('channel_id', 'Ch∆∞a c√≥')
        print(f"  {i:2d}. {name}")
        print(f"      Handle: {handle}")
        print(f"      Channel ID: {channel_id}")

    print("-" * 60)

    try:
        choice = input("Nh·∫≠p s·ªë th·ª© t·ª± channel c·∫ßn c·∫≠p nh·∫≠t: ").strip()

        if not choice.isdigit():
            print("‚ùå Vui l√≤ng nh·∫≠p s·ªë th·ª© t·ª± h·ª£p l·ªá")
            input("Nh·∫•n Enter ƒë·ªÉ quay l·∫°i...")
            return

        choice_num = int(choice)
        if choice_num < 1 or choice_num > len(channels):
            print("‚ùå S·ªë th·ª© t·ª± kh√¥ng h·ª£p l·ªá")
            input("Nh·∫•n Enter ƒë·ªÉ quay l·∫°i...")
            return

        selected_channel = channels[choice_num - 1]
        channel_id = selected_channel.get('id')
        channel_name = selected_channel.get('name', 'Unknown')
        handle = selected_channel.get('handle')

        if not handle:
            print("‚ùå Channel n√†y kh√¥ng c√≥ handle ƒë·ªÉ c·∫≠p nh·∫≠t ID")
            input("Nh·∫•n Enter ƒë·ªÉ quay l·∫°i...")
            return

        # X√°c nh·∫≠n c·∫≠p nh·∫≠t
        print(f"\n‚ö†Ô∏è B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën c·∫≠p nh·∫≠t channel ID cho '{channel_name}'?")
        print(f"Handle: {handle}")
        confirm = input("Nh·∫≠p 'UPDATE' ƒë·ªÉ x√°c nh·∫≠n: ").strip()

        if confirm == "UPDATE":
            print(f"\nüîÑ ƒêang c·∫≠p nh·∫≠t channel ID cho '{channel_name}'...")

            result = config_manager.update_channel_id(channel_id)
            if result and result.get('success'):
                print(f"‚úÖ ƒê√£ c·∫≠p nh·∫≠t channel ID th√†nh c√¥ng")
                print(f"Channel ID: {result.get('channel_id', 'N/A')}")
                print(f"Channel Title: {result.get('channel_title', 'N/A')}")
            else:
                print("‚ùå L·ªói khi c·∫≠p nh·∫≠t channel ID")
                if result:
                    print(f"L·ªói: {result.get('error', 'Kh√¥ng x√°c ƒë·ªãnh')}")
        else:
            print("‚ùå ƒê√£ h·ªßy thao t√°c c·∫≠p nh·∫≠t")

    except Exception as e:
        print(f"‚ùå L·ªói: {e}")

    print("\n" + "=" * 60)
    input("Nh·∫•n Enter ƒë·ªÉ quay l·∫°i...")


def show_firebase_management(config_manager):
    """Hi·ªÉn th·ªã menu qu·∫£n l√Ω Firebase"""
    while True:
        clear_screen()
        show_header()

        print("üî• QU·∫¢N L√ù FIREBASE")
        print("=" * 60)
        print("Ch·ª©c nƒÉng qu·∫£n l√Ω d·ªØ li·ªáu Firebase:")
        print("  - Xem danh s√°ch collections")
        print("  - Xem th·ªëng k√™ collection")
        print("  - X√≥a to√†n b·ªô collection")
        print("  - X√≥a documents c≈©")
        print("  - Xem documents trong collection")
        print("  - X√≥a document c·ª• th·ªÉ")
        print("  - C·∫≠p nh·∫≠t document")
        print("-" * 60)

        print("üîß MENU FIREBASE:")
        print("  1. üìã Xem danh s√°ch Collections")
        print("  2. üìä Xem th·ªëng k√™ Collection")
        print("  3. üóëÔ∏è X√≥a to√†n b·ªô Collection")
        print("  4. üóëÔ∏è X√≥a Documents c≈©")
        print("  5. üìÑ Xem Documents trong Collection")
        print("  6. üóëÔ∏è X√≥a Document c·ª• th·ªÉ")
        print("  7. ‚úèÔ∏è C·∫≠p nh·∫≠t Document")
        print("  0. üîô Quay l·∫°i menu ch√≠nh")
        print("-" * 60)

        choice = input("Ch·ªçn ch·ª©c nƒÉng (0-7): ").strip()

        if choice == '0':
            break
        elif choice == '1':
            show_firebase_collections(config_manager)
        elif choice == '2':
            show_collection_stats(config_manager)
        elif choice == '3':
            show_clear_collection(config_manager)
        elif choice == '4':
            show_clear_old_documents(config_manager)
        elif choice == '5':
            show_collection_documents(config_manager)
        elif choice == '6':
            show_delete_document(config_manager)
        elif choice == '7':
            show_update_document(config_manager)
        else:
            print("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!")
            input("Nh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")


def show_firebase_collections(config_manager):
    """Hi·ªÉn th·ªã danh s√°ch collections"""
    clear_screen()
    show_header()

    print("üìã DANH S√ÅCH FIREBASE COLLECTIONS")
    print("=" * 60)

    try:
        result = config_manager.get_firebase_collections()
        if result and result.get('success'):
            collections = result.get('collections', [])
            count = result.get('count', 0)

            print(f"‚úÖ T√¨m th·∫•y {count} collections:")
            print("-" * 60)

            if collections:
                for i, collection in enumerate(collections, 1):
                    print(f"  {i:2d}. {collection}")
            else:
                print("  Kh√¥ng c√≥ collection n√†o")

            print("-" * 60)
            print(f"üìä T·ªïng c·ªông: {count} collections")

        else:
            print("‚ùå Kh√¥ng th·ªÉ l·∫•y danh s√°ch collections")
            if result:
                print(f"L·ªói: {result.get('error', 'Kh√¥ng x√°c ƒë·ªãnh')}")

    except Exception as e:
        print(f"‚ùå L·ªói: {e}")

    print("\n" + "=" * 60)
    input("Nh·∫•n Enter ƒë·ªÉ quay l·∫°i...")


def show_collection_stats(config_manager):
    """Hi·ªÉn th·ªã th·ªëng k√™ collection"""
    clear_screen()
    show_header()

    print("üìä TH·ªêNG K√ä COLLECTION")
    print("=" * 60)

    # L·∫•y danh s√°ch collections tr∆∞·ªõc
    collections_result = config_manager.get_firebase_collections()
    if not collections_result or not collections_result.get('success'):
        print("‚ùå Kh√¥ng th·ªÉ l·∫•y danh s√°ch collections")
        input("Nh·∫•n Enter ƒë·ªÉ quay l·∫°i...")
        return

    collections = collections_result.get('collections', [])
    if not collections:
        print("‚ùå Kh√¥ng c√≥ collection n√†o")
        input("Nh·∫•n Enter ƒë·ªÉ quay l·∫°i...")
        return

    print("üìã Ch·ªçn collection ƒë·ªÉ xem th·ªëng k√™:")
    for i, collection in enumerate(collections, 1):
        print(f"  {i:2d}. {collection}")

    print("-" * 60)

    try:
        choice = input("Nh·∫≠p s·ªë th·ª© t·ª± ho·∫∑c t√™n collection: ").strip()

        # X√°c ƒë·ªãnh collection name
        collection_name = None
        if choice.isdigit():
            choice_num = int(choice)
            if 1 <= choice_num <= len(collections):
                collection_name = collections[choice_num - 1]
            else:
                print("‚ùå S·ªë th·ª© t·ª± kh√¥ng h·ª£p l·ªá")
                input("Nh·∫•n Enter ƒë·ªÉ quay l·∫°i...")
                return
        else:
            if choice in collections:
                collection_name = choice
            else:
                print(f"‚ùå Kh√¥ng t√¨m th·∫•y collection '{choice}'")
                input("Nh·∫•n Enter ƒë·ªÉ quay l·∫°i...")
                return

        # L·∫•y th·ªëng k√™
        result = config_manager.get_collection_stats(collection_name)
        if result and result.get('success'):
            doc_count = result.get('document_count', 0)
            collection = result.get('collection', collection_name)

            print(f"\nüìä TH·ªêNG K√ä COLLECTION: {collection}")
            print("-" * 60)
            print(f"üìÑ S·ªë documents: {doc_count:,}")

            if doc_count > 0:
                print(f"üíæ K√≠ch th∆∞·ªõc ∆∞·ªõc t√≠nh: ~{doc_count * 2} KB")

        else:
            print("‚ùå Kh√¥ng th·ªÉ l·∫•y th·ªëng k√™ collection")
            if result:
                print(f"L·ªói: {result.get('error', 'Kh√¥ng x√°c ƒë·ªãnh')}")

    except Exception as e:
        print(f"‚ùå L·ªói: {e}")

    print("\n" + "=" * 60)
    input("Nh·∫•n Enter ƒë·ªÉ quay l·∫°i...")


def show_clear_collection(config_manager):
    """Hi·ªÉn th·ªã ch·ª©c nƒÉng x√≥a collection"""
    clear_screen()
    show_header()

    print("üóëÔ∏è X√ìA TO√ÄN B·ªò COLLECTION")
    print("=" * 60)
    print("‚ö†Ô∏è C·∫¢NH B√ÅO: H√†nh ƒë·ªông n√†y s·∫Ω x√≥a T·∫§T C·∫¢ documents trong collection!")
    print("‚ö†Ô∏è H√†nh ƒë·ªông n√†y KH√îNG TH·ªÇ HO√ÄN T√ÅC!")
    print("-" * 60)

    # L·∫•y danh s√°ch collections
    collections_result = config_manager.get_firebase_collections()
    if not collections_result or not collections_result.get('success'):
        print("‚ùå Kh√¥ng th·ªÉ l·∫•y danh s√°ch collections")
        input("Nh·∫•n Enter ƒë·ªÉ quay l·∫°i...")
        return

    collections = collections_result.get('collections', [])
    if not collections:
        print("‚ùå Kh√¥ng c√≥ collection n√†o")
        input("Nh·∫•n Enter ƒë·ªÉ quay l·∫°i...")
        return

    print("üìã Ch·ªçn collection ƒë·ªÉ x√≥a:")
    for i, collection in enumerate(collections, 1):
        print(f"  {i:2d}. {collection}")

    print("-" * 60)

    try:
        choice = input("Nh·∫≠p s·ªë th·ª© t·ª± ho·∫∑c t√™n collection: ").strip()

        # X√°c ƒë·ªãnh collection name
        collection_name = None
        if choice.isdigit():
            choice_num = int(choice)
            if 1 <= choice_num <= len(collections):
                collection_name = collections[choice_num - 1]
            else:
                print("‚ùå S·ªë th·ª© t·ª± kh√¥ng h·ª£p l·ªá")
                input("Nh·∫•n Enter ƒë·ªÉ quay l·∫°i...")
                return
        else:
            if choice in collections:
                collection_name = choice
            else:
                print(f"‚ùå Kh√¥ng t√¨m th·∫•y collection '{choice}'")
                input("Nh·∫•n Enter ƒë·ªÉ quay l·∫°i...")
                return

        # Hi·ªÉn th·ªã th·ªëng k√™ tr∆∞·ªõc khi x√≥a
        stats_result = config_manager.get_collection_stats(collection_name)
        if stats_result and stats_result.get('success'):
            doc_count = stats_result.get('document_count', 0)
            print(f"\nüìä Collection '{collection_name}' c√≥ {doc_count:,} documents")

        # X√°c nh·∫≠n x√≥a
        print(f"\n‚ö†Ô∏è B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a T·∫§T C·∫¢ documents trong collection '{collection_name}'?")
        confirm = input("Nh·∫≠p 'DELETE' ƒë·ªÉ x√°c nh·∫≠n: ").strip()

        if confirm == "DELETE":
            print(f"\nüóëÔ∏è ƒêang x√≥a collection '{collection_name}'...")

            result = config_manager.clear_collection(collection_name)
            if result and result.get('success'):
                deleted_count = result.get('deleted_count', 0)
                print(f"‚úÖ ƒê√£ x√≥a th√†nh c√¥ng {deleted_count:,} documents t·ª´ collection '{collection_name}'")
            else:
                print("‚ùå L·ªói khi x√≥a collection")
                if result:
                    print(f"L·ªói: {result.get('error', 'Kh√¥ng x√°c ƒë·ªãnh')}")
        else:
            print("‚ùå ƒê√£ h·ªßy thao t√°c x√≥a")

    except Exception as e:
        print(f"‚ùå L·ªói: {e}")

    print("\n" + "=" * 60)
    input("Nh·∫•n Enter ƒë·ªÉ quay l·∫°i...")


def show_clear_old_documents(config_manager):
    """Hi·ªÉn th·ªã ch·ª©c nƒÉng x√≥a documents c≈©"""
    clear_screen()
    show_header()

    print("üóëÔ∏è X√ìA DOCUMENTS C≈®")
    print("=" * 60)
    print("Ch·ª©c nƒÉng n√†y s·∫Ω x√≥a c√°c documents c≈© h∆°n s·ªë ng√†y ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh")
    print("-" * 60)

    # L·∫•y danh s√°ch collections
    collections_result = config_manager.get_firebase_collections()
    if not collections_result or not collections_result.get('success'):
        print("‚ùå Kh√¥ng th·ªÉ l·∫•y danh s√°ch collections")
        input("Nh·∫•n Enter ƒë·ªÉ quay l·∫°i...")
        return

    collections = collections_result.get('collections', [])
    if not collections:
        print("‚ùå Kh√¥ng c√≥ collection n√†o")
        input("Nh·∫•n Enter ƒë·ªÉ quay l·∫°i...")
        return

    print("üìã Ch·ªçn collection:")
    for i, collection in enumerate(collections, 1):
        print(f"  {i:2d}. {collection}")

    print("-" * 60)

    try:
        choice = input("Nh·∫≠p s·ªë th·ª© t·ª± ho·∫∑c t√™n collection: ").strip()

        # X√°c ƒë·ªãnh collection name
        collection_name = None
        if choice.isdigit():
            choice_num = int(choice)
            if 1 <= choice_num <= len(collections):
                collection_name = collections[choice_num - 1]
            else:
                print("‚ùå S·ªë th·ª© t·ª± kh√¥ng h·ª£p l·ªá")
                input("Nh·∫•n Enter ƒë·ªÉ quay l·∫°i...")
                return
        else:
            if choice in collections:
                collection_name = choice
            else:
                print(f"‚ùå Kh√¥ng t√¨m th·∫•y collection '{choice}'")
                input("Nh·∫•n Enter ƒë·ªÉ quay l·∫°i...")
                return

        # Nh·∫≠p s·ªë ng√†y
        while True:
            try:
                days_input = input(f"\nNh·∫≠p s·ªë ng√†y (documents c≈© h∆°n X ng√†y s·∫Ω b·ªã x√≥a): ").strip()
                days = int(days_input)
                if days > 0:
                    break
                else:
                    print("‚ùå S·ªë ng√†y ph·∫£i l·ªõn h∆°n 0")
            except ValueError:
                print("‚ùå Vui l√≤ng nh·∫≠p s·ªë nguy√™n h·ª£p l·ªá")

        # Hi·ªÉn th·ªã th·ªëng k√™ tr∆∞·ªõc khi x√≥a
        stats_result = config_manager.get_collection_stats(collection_name)
        if stats_result and stats_result.get('success'):
            doc_count = stats_result.get('document_count', 0)
            print(f"\nüìä Collection '{collection_name}' c√≥ {doc_count:,} documents")

        # X√°c nh·∫≠n x√≥a
        print(f"\n‚ö†Ô∏è B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a documents c≈© h∆°n {days} ng√†y trong collection '{collection_name}'?")
        confirm = input("Nh·∫≠p 'DELETE' ƒë·ªÉ x√°c nh·∫≠n: ").strip()

        if confirm == "DELETE":
            print(f"\nüóëÔ∏è ƒêang x√≥a documents c≈© h∆°n {days} ng√†y...")

            result = config_manager.clear_old_documents(collection_name, days)
            if result and result.get('success'):
                deleted_count = result.get('deleted_count', 0)
                cutoff_date = result.get('cutoff_date', 'N/A')
                print(f"‚úÖ ƒê√£ x√≥a th√†nh c√¥ng {deleted_count:,} documents c≈© h∆°n {days} ng√†y")
                print(f"üìÖ Cutoff date: {cutoff_date}")
            else:
                print("‚ùå L·ªói khi x√≥a documents c≈©")
                if result:
                    print(f"L·ªói: {result.get('error', 'Kh√¥ng x√°c ƒë·ªãnh')}")
        else:
            print("‚ùå ƒê√£ h·ªßy thao t√°c x√≥a")

    except Exception as e:
        print(f"‚ùå L·ªói: {e}")

    print("\n" + "=" * 60)
    input("Nh·∫•n Enter ƒë·ªÉ quay l·∫°i...")


def show_collection_documents(config_manager):
    """Hi·ªÉn th·ªã documents trong collection"""
    clear_screen()
    show_header()

    print("üìÑ XEM DOCUMENTS TRONG COLLECTION")
    print("=" * 60)

    # L·∫•y danh s√°ch collections
    collections_result = config_manager.get_firebase_collections()
    if not collections_result or not collections_result.get('success'):
        print("‚ùå Kh√¥ng th·ªÉ l·∫•y danh s√°ch collections")
        input("Nh·∫•n Enter ƒë·ªÉ quay l·∫°i...")
        return

    collections = collections_result.get('collections', [])
    if not collections:
        print("‚ùå Kh√¥ng c√≥ collection n√†o")
        input("Nh·∫•n Enter ƒë·ªÉ quay l·∫°i...")
        return

    print("üìã Ch·ªçn collection:")
    for i, collection in enumerate(collections, 1):
        print(f"  {i:2d}. {collection}")

    print("-" * 60)

    try:
        choice = input("Nh·∫≠p s·ªë th·ª© t·ª± ho·∫∑c t√™n collection: ").strip()

        # X√°c ƒë·ªãnh collection name
        collection_name = None
        if choice.isdigit():
            choice_num = int(choice)
            if 1 <= choice_num <= len(collections):
                collection_name = collections[choice_num - 1]
            else:
                print("‚ùå S·ªë th·ª© t·ª± kh√¥ng h·ª£p l·ªá")
                input("Nh·∫•n Enter ƒë·ªÉ quay l·∫°i...")
                return
        else:
            if choice in collections:
                collection_name = choice
            else:
                print(f"‚ùå Kh√¥ng t√¨m th·∫•y collection '{choice}'")
                input("Nh·∫•n Enter ƒë·ªÉ quay l·∫°i...")
                return

        # L·∫•y documents
        result = config_manager.get_collection_documents(collection_name, limit=20)
        if result and result.get('success'):
            documents = result.get('documents', [])
            count = result.get('count', 0)

            print(f"\nüìÑ DOCUMENTS TRONG COLLECTION: {collection_name}")
            print("=" * 80)

            if documents:
                print(f"{'ID':<30} {'Title/Name':<30} {'Date':<20}")
                print("-" * 80)

                for doc in documents:
                    doc_id = doc.get('id', 'N/A')[:28] + '..' if len(doc.get('id', '')) > 30 else doc.get('id', 'N/A')

                    # T√¨m title ho·∫∑c name
                    title = 'N/A'
                    for field in ['title', 'name', 'subject', 'heading']:
                        if field in doc:
                            title = str(doc[field])[:28] + '..' if len(str(doc[field])) > 30 else str(doc[field])
                            break

                    # T√¨m date
                    date = 'N/A'
                    for field in ['created_at', 'updated_at', 'timestamp', 'date', 'crawled_at', 'published_date']:
                        if field in doc:
                            date = str(doc[field])[:20]
                            break

                    print(f"{doc_id:<30} {title:<30} {date:<20}")

                print("-" * 80)
                print(f"üìä Hi·ªÉn th·ªã {len(documents)}/{count} documents (gi·ªõi h·∫°n 20)")
            else:
                print("  Kh√¥ng c√≥ documents n√†o")

        else:
            print("‚ùå Kh√¥ng th·ªÉ l·∫•y documents")
            if result:
                print(f"L·ªói: {result.get('error', 'Kh√¥ng x√°c ƒë·ªãnh')}")

    except Exception as e:
        print(f"‚ùå L·ªói: {e}")

    print("\n" + "=" * 60)
    input("Nh·∫•n Enter ƒë·ªÉ quay l·∫°i...")


def show_delete_document(config_manager):
    """Hi·ªÉn th·ªã ch·ª©c nƒÉng x√≥a document c·ª• th·ªÉ"""
    clear_screen()
    show_header()

    print("üóëÔ∏è X√ìA DOCUMENT C·ª§ TH·ªÇ")
    print("=" * 60)
    print("Ch·ª©c nƒÉng n√†y s·∫Ω x√≥a m·ªôt document c·ª• th·ªÉ trong collection")
    print("-" * 60)

    # L·∫•y danh s√°ch collections
    collections_result = config_manager.get_firebase_collections()
    if not collections_result or not collections_result.get('success'):
        print("‚ùå Kh√¥ng th·ªÉ l·∫•y danh s√°ch collections")
        input("Nh·∫•n Enter ƒë·ªÉ quay l·∫°i...")
        return

    collections = collections_result.get('collections', [])
    if not collections:
        print("‚ùå Kh√¥ng c√≥ collection n√†o")
        input("Nh·∫•n Enter ƒë·ªÉ quay l·∫°i...")
        return

    print("üìã Ch·ªçn collection:")
    for i, collection in enumerate(collections, 1):
        print(f"  {i:2d}. {collection}")

    print("-" * 60)

    try:
        choice = input("Nh·∫≠p s·ªë th·ª© t·ª± ho·∫∑c t√™n collection: ").strip()

        # X√°c ƒë·ªãnh collection name
        collection_name = None
        if choice.isdigit():
            choice_num = int(choice)
            if 1 <= choice_num <= len(collections):
                collection_name = collections[choice_num - 1]
            else:
                print("‚ùå S·ªë th·ª© t·ª± kh√¥ng h·ª£p l·ªá")
                input("Nh·∫•n Enter ƒë·ªÉ quay l·∫°i...")
                return
        else:
            if choice in collections:
                collection_name = choice
            else:
                print(f"‚ùå Kh√¥ng t√¨m th·∫•y collection '{choice}'")
                input("Nh·∫•n Enter ƒë·ªÉ quay l·∫°i...")
                return

        # Nh·∫≠p document ID
        document_id = input(f"\nNh·∫≠p Document ID c·∫ßn x√≥a: ").strip()
        if not document_id:
            print("‚ùå Document ID kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng")
            input("Nh·∫•n Enter ƒë·ªÉ quay l·∫°i...")
            return

        # X√°c nh·∫≠n x√≥a
        print(f"\n‚ö†Ô∏è B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a document '{document_id}' trong collection '{collection_name}'?")
        confirm = input("Nh·∫≠p 'DELETE' ƒë·ªÉ x√°c nh·∫≠n: ").strip()

        if confirm == "DELETE":
            print(f"\nüóëÔ∏è ƒêang x√≥a document '{document_id}'...")

            result = config_manager.delete_document(collection_name, document_id)
            if result and result.get('success'):
                print(f"‚úÖ ƒê√£ x√≥a th√†nh c√¥ng document '{document_id}'")
            else:
                print("‚ùå L·ªói khi x√≥a document")
                if result:
                    print(f"L·ªói: {result.get('error', 'Kh√¥ng x√°c ƒë·ªãnh')}")
        else:
            print("‚ùå ƒê√£ h·ªßy thao t√°c x√≥a")

    except Exception as e:
        print(f"‚ùå L·ªói: {e}")

    print("\n" + "=" * 60)
    input("Nh·∫•n Enter ƒë·ªÉ quay l·∫°i...")


def show_update_document(config_manager):
    """Hi·ªÉn th·ªã ch·ª©c nƒÉng c·∫≠p nh·∫≠t document"""
    clear_screen()
    show_header()

    print("‚úèÔ∏è C·∫¨P NH·∫¨T DOCUMENT")
    print("=" * 60)
    print("Ch·ª©c nƒÉng n√†y s·∫Ω c·∫≠p nh·∫≠t m·ªôt document c·ª• th·ªÉ trong collection")
    print("-" * 60)

    # L·∫•y danh s√°ch collections
    collections_result = config_manager.get_firebase_collections()
    if not collections_result or not collections_result.get('success'):
        print("‚ùå Kh√¥ng th·ªÉ l·∫•y danh s√°ch collections")
        input("Nh·∫•n Enter ƒë·ªÉ quay l·∫°i...")
        return

    collections = collections_result.get('collections', [])
    if not collections:
        print("‚ùå Kh√¥ng c√≥ collection n√†o")
        input("Nh·∫•n Enter ƒë·ªÉ quay l·∫°i...")
        return

    print("üìã Ch·ªçn collection:")
    for i, collection in enumerate(collections, 1):
        print(f"  {i:2d}. {collection}")

    print("-" * 60)

    try:
        choice = input("Nh·∫≠p s·ªë th·ª© t·ª± ho·∫∑c t√™n collection: ").strip()

        # X√°c ƒë·ªãnh collection name
        collection_name = None
        if choice.isdigit():
            choice_num = int(choice)
            if 1 <= choice_num <= len(collections):
                collection_name = collections[choice_num - 1]
            else:
                print("‚ùå S·ªë th·ª© t·ª± kh√¥ng h·ª£p l·ªá")
                input("Nh·∫•n Enter ƒë·ªÉ quay l·∫°i...")
                return
        else:
            if choice in collections:
                collection_name = choice
            else:
                print(f"‚ùå Kh√¥ng t√¨m th·∫•y collection '{choice}'")
                input("Nh·∫•n Enter ƒë·ªÉ quay l·∫°i...")
                return

        # Nh·∫≠p document ID
        document_id = input(f"\nNh·∫≠p Document ID c·∫ßn c·∫≠p nh·∫≠t: ").strip()
        if not document_id:
            print("‚ùå Document ID kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng")
            input("Nh·∫•n Enter ƒë·ªÉ quay l·∫°i...")
            return

        # Nh·∫≠p d·ªØ li·ªáu c·∫≠p nh·∫≠t
        print(f"\nNh·∫≠p d·ªØ li·ªáu c·∫≠p nh·∫≠t (JSON format):")
        print("V√≠ d·ª•: {\"title\": \"New Title\", \"status\": \"updated\"}")

        try:
            update_data_str = input("D·ªØ li·ªáu JSON: ").strip()
            if not update_data_str:
                print("‚ùå D·ªØ li·ªáu kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng")
                input("Nh·∫•n Enter ƒë·ªÉ quay l·∫°i...")
                return

            import json
            update_data = json.loads(update_data_str)

            # X√°c nh·∫≠n c·∫≠p nh·∫≠t
            print(f"\n‚ö†Ô∏è B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën c·∫≠p nh·∫≠t document '{document_id}'?")
            print(f"D·ªØ li·ªáu: {update_data}")
            confirm = input("Nh·∫≠p 'UPDATE' ƒë·ªÉ x√°c nh·∫≠n: ").strip()

            if confirm == "UPDATE":
                print(f"\n‚úèÔ∏è ƒêang c·∫≠p nh·∫≠t document '{document_id}'...")

                result = config_manager.update_document(collection_name, document_id, update_data)
                if result and result.get('success'):
                    print(f"‚úÖ ƒê√£ c·∫≠p nh·∫≠t th√†nh c√¥ng document '{document_id}'")
                else:
                    print("‚ùå L·ªói khi c·∫≠p nh·∫≠t document")
                    if result:
                        print(f"L·ªói: {result.get('error', 'Kh√¥ng x√°c ƒë·ªãnh')}")
            else:
                print("‚ùå ƒê√£ h·ªßy thao t√°c c·∫≠p nh·∫≠t")

        except json.JSONDecodeError:
            print("‚ùå D·ªØ li·ªáu JSON kh√¥ng h·ª£p l·ªá")
        except Exception as e:
            print(f"‚ùå L·ªói: {e}")

    except Exception as e:
        print(f"‚ùå L·ªói: {e}")

    print("\n" + "=" * 60)
    input("Nh·∫•n Enter ƒë·ªÉ quay l·∫°i...")


def show_main_menu(config_manager):
    """Hi·ªÉn th·ªã menu ch√≠nh"""
    while True:
        clear_screen()
        show_header()

        # Test k·∫øt n·ªëi
        if not config_manager.test_connection():
            print("‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server!")
            print("H√£y ki·ªÉm tra:")
            print("  - Server c√≥ ƒëang ch·∫°y kh√¥ng?")
            print("  - IP address c√≥ ƒë√∫ng kh√¥ng?")
            print("  - Port 5000 c√≥ m·ªü kh√¥ng?")
            print(f"  - URL hi·ªán t·∫°i: {SERVER_URL}")
            print("\nNh·∫•n Enter ƒë·ªÉ th·ª≠ l·∫°i...")
            input()
            continue

        print("‚úÖ K·∫øt n·ªëi server th√†nh c√¥ng!")

        print("\nüîß MENU CH√çNH:")
        print("  1. üí∞ Th√¥ng tin t√†i kho·∫£n MT5")
        print("  2. üì∫ Qu·∫£n l√Ω YouTube Channels")
        print("  3. üî• Qu·∫£n l√Ω Firebase")
        print("  0. üö™ Tho√°t")
        print("-" * 60)

        choice = input("Ch·ªçn ch·ª©c nƒÉng (0-3): ").strip()

        if choice == '0':
            print("üëã T·∫°m bi·ªát!")
            break
        elif choice == '1':
            show_mt5_account_info(config_manager)
        elif choice == '2':
            show_youtube_channel_management(config_manager)
        elif choice == '3':
            show_firebase_management(config_manager)
        else:
            print("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!")
            input("Nh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")


def main():
    """H√†m ch√≠nh"""
    global SERVER_URL

    print("üöÄ KH·ªûI ƒê·ªòNG CLIENT04.PY")
    print("=" * 60)

    # Ki·ªÉm tra k·∫øt n·ªëi m·∫°ng
    print("üì° Ki·ªÉm tra k·∫øt n·ªëi...")

    config_manager = ConfigManager(SERVER_URL)

    if not config_manager.test_connection():
        print(f"‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn {SERVER_URL}")
        print("\nüîß H∆Ø·ªöNG D·∫™N KH·∫ÆC PH·ª§C:")
        print("1. ƒê·∫£m b·∫£o server ƒëang ch·∫°y tr√™n m√°y ch·ªß")
        print("2. Ki·ªÉm tra IP address trong file client.py")
        print("3. ƒê·∫£m b·∫£o port 5000 ƒë∆∞·ª£c m·ªü")
        print("4. Ki·ªÉm tra firewall")
        print(f"\nIP hi·ªán t·∫°i: {SERVER_URL}")
        change_ip = input("B·∫°n c√≥ mu·ªën thay ƒë·ªïi IP kh√¥ng? (y/n): ").lower()
        if change_ip == 'y':
            new_ip = input("Nh·∫≠p IP m·ªõi: ").strip()
            if new_ip:
                SERVER_URL = f"http://{new_ip}:5000"
                config_manager = ConfigManager(SERVER_URL)
                print(f"‚úÖ ƒê√£ thay ƒë·ªïi IP th√†nh: {SERVER_URL}")
                input("Nh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")

    # Hi·ªÉn th·ªã menu ch√≠nh
    show_main_menu(config_manager)


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è Ch∆∞∆°ng tr√¨nh b·ªã gi√°n ƒëo·∫°n")
        print("üëã T·∫°m bi·ªát!")
    except Exception as e:
        print(f"\n‚ùå L·ªói kh√¥ng mong mu·ªën: {e}")
        print("H√£y ki·ªÉm tra l·∫°i v√† th·ª≠ l·∫°i") 